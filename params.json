{
  "name": "Courseware",
  "tagline": "CourseWare - specialized content generator for Javascript courses",
  "body": "# CourseWare - specialized content generator for Javascript courses\r\n\r\nCourseWare is a tool for generating interactive materials for your lectures.\r\n\r\n[![Build Status](https://travis-ci.org/Angular-cz/courseware.svg?branch=master)](https://travis-ci.org/Angular-cz/courseware)\r\n[![Dependency Status](https://david-dm.org/Angular-cz/courseware.png)](https://david-dm.org/Angular-cz/courseware) \r\n[![devDependency Status](https://david-dm.org/Angular-cz/courseware/dev-status.png)](https://david-dm.org/Angular-cz/courseware#info=devDependencies)\r\n\r\n## Short presentation\r\n\r\nCheck the video on youtube for brief information (9 min) - [link](https://www.youtube.com/watch?v=9aiTtVoqmow)\r\n\r\n[![Courseware - efficient materials for your workshop](https://img.youtube.com/vi/9aiTtVoqmow/0.jpg)](https://www.youtube.com/watch?v=9aiTtVoqmow)\r\n\r\nYou can see readonly DEMO materials here: https://angular-cz-courseware-examples.herokuapp.com\r\n\r\n## Motivation\r\nWhen you start creating materials you ussualy starts with nothing, then you go through the text files and html pages and there \r\nyou come to the documentation generators. There you strugle with just text descriptions or invest your time and try to enhance the generator. \r\n\r\nThere comes the CourseWare, its documentation specialized generator for programming courses and lectures.\r\n\r\nCourseWare is product of materials evolution end we use it regularly in our Javascript and AngularJS lectures - http://www.angular.cz. \r\n\r\n### Features\r\n - single file documentation\r\n - jade markup\r\n - responsive layout\r\n - components for hints and solutions\r\n - source highlighter\r\n - interactive integration of test results\r\n\r\n### Will CourseWare be useful for me ?\r\nYou will get most benefits from CourseWare when you use it on some kind of javascript lectures. But it can serve also as platform independent documentation tool, because it produces single **index.html** file.\r\n\r\n## Brief info about usage\r\n\r\nThere we will describe typical use-case when you have already your exercises in separate folders, where students are supposed \r\nto edit source code and check the results in their browser.\r\n\r\nFirst install the npm package: \r\n\r\n```\r\nnpm install courseware\r\n```\r\n\r\nThen create courseware configuration file **courseware.json** in the root of your package. \r\nYou can create default configuration file with command\r\n\r\n```\r\ncourseware init\r\n```\r\n\r\nThen add your exercise names to the **todos** array in the configuration file\r\n\r\n```\r\n{\r\n  \"introFile\": \"courseware-intro.jade\",\r\n  \"header\": \"CourseWare usage DEMO\",\r\n  \"todoFilePath\": \"complete/todo.jade\",\r\n  \"todos\": [\r\n    \"01-simple-generator\",\r\n    \"02-generator-with-tests\",\r\n    \"03-sandbox\"\r\n  ]\r\n}\r\n```\r\n\r\nThis tell CourseWare to use **courseware-intro.jade** as homepage and finds exercise instructions file **todo.jade** in folder \r\n**complete** of each item in exercises list.\r\n\r\nIt exactly reffers to our case, when each exercise folder lookd like the above. \r\nSource files to edit are in its root and materials are in folder with finished exercise\r\n\r\n```\r\n  |- 01-generator-with-tests\r\n     |- complete\r\n     |  |- app.js\r\n     |  |- index.html\r\n     |  |- todo.jade   <--- instructions for jade\r\n     |\r\n     |- app.js\r\n     |- index.html\r\n```\r\n\r\nThen you can use CourseWare to build your materials into single index.html file using command\r\n\r\n```\r\ncourseware build\r\n```\r\n\r\nYou can use it both as package which compiles your documentation when the host package is being installed. \r\nOr globally just to generate single file documentation which is then included in repository.\r\n\r\n### Develop mode\r\nWhen you develop your materials, livereload can help you a lot. You can run this mode with command\r\n\r\n```\r\ncourseware devel\r\n```\r\n\r\nDevelopment server will run on http://localhost:8080, adds livereload server to the index.html,\r\nand reload browser when some of todo.jade or courseware-intro.jade is changed.\r\n\r\n### Examples repository as a full documentation\r\n\r\nDefinitely check the example repository where you can see typical javascript course structure. \r\nIt will help you to understand how to use CouseWare in your course.\r\nIt contains not only DEMO course but also style galery and documentation. https://github.com/Angular-cz/courseware-examples\r\n\r\nCourseWare is there integrated as package dependency and index.html is build when host package installed.\r\n\r\nYou can see examples and read documentation here: https://angular-cz-courseware-examples.herokuapp.com\r\n\r\n## Contribution\r\nWe would be glad if you like this tool so much that you will help us to test this it, fix issues or create new features. \r\nAlso if you write some article or use it in public course, let us know we will list it here.\r\n\r\n### Technologies\r\nCourseware is based on well known and documented technologies: Npm, Gulp, Jade, Bootstrap, Socket.io, Highlight.js, AngularJS, Karma, Jasmine \r\n\r\n... so you can also learn a lot about wide range of nice tools.\r\n\r\n### How to develop CourseWare\r\n\r\nClone this package and link the cloned copy to the npm via\r\n\r\n```\r\nnpm link\r\n```\r\n\r\nThen use examples as host package and run development server inside the examples package with command\r\n\r\n```\r\ncourseware courseware-devel\r\n```\r\n\r\nThen checks and livereload are also provided for CourseWare internals.\r\n\r\n## Licence\r\nCourseWare is free for non-commercial and internal courses, and we would like to hear about your progress.\r\n\r\nIf you want to use CourseWare on commercial course, or get comercial support do not hasitate to contact us.\r\n\r\n## Contact information\r\n\r\n| Web: http://www.angular.cz | Twitter: @angular_cz |\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}